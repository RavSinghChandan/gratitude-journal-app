name: Full Stack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'
  ANGULAR_VERSION: '18'

jobs:
  # Frontend Pipeline
  frontend-pipeline:
    name: Frontend Pipeline
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'gratitude-journal-front-end') || contains(github.event.head_commit.added, 'gratitude-journal-front-end') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: gratitude-journal-front-end/gratitude-jounal-ui/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd gratitude-journal-front-end/gratitude-jounal-ui
        npm ci
        
    - name: Run frontend tests
      run: |
        cd gratitude-journal-front-end/gratitude-jounal-ui
        npm run test -- --watch=false --browsers=ChromeHeadless
        
    - name: Build frontend
      run: |
        cd gratitude-journal-front-end/gratitude-jounal-ui
        npm run build -- --configuration production
        
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: gratitude-journal-front-end/gratitude-jounal-ui/dist/
        retention-days: 7

  # Backend Pipeline
  backend-pipeline:
    name: Backend Pipeline
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'graitude-journal-back-end') || contains(github.event.head_commit.added, 'graitude-journal-back-end') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
        cache-dependency-path: graitude-journal-back-end/pom.xml
        
    - name: Run backend tests
      run: |
        cd graitude-journal-back-end
        mvn clean test -B
        
    - name: Build backend
      run: |
        cd graitude-journal-back-end
        mvn clean package -B -DskipTests
        
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: graitude-journal-back-end/target/*.jar
        retention-days: 7

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-pipeline, backend-pipeline]
    if: always() && (needs.frontend-pipeline.result == 'success' || needs.frontend-pipeline.result == 'skipped') && (needs.backend-pipeline.result == 'success' || needs.backend-pipeline.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Start backend server
      run: |
        cd graitude-journal-back-end
        java -jar target/*.jar &
        sleep 30
        
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add your integration test commands here
        # Example: npm run e2e or mvn verify
        
    - name: Stop backend server
      run: |
        pkill -f "java -jar"

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-pipeline, backend-pipeline]
    if: always() && (needs.frontend-pipeline.result == 'success' || needs.frontend-pipeline.result == 'skipped') && (needs.backend-pipeline.result == 'success' || needs.backend-pipeline.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Frontend security scan
      if: contains(github.event.head_commit.modified, 'gratitude-journal-front-end') || contains(github.event.head_commit.added, 'gratitude-journal-front-end') || github.event_name == 'pull_request'
      run: |
        cd gratitude-journal-front-end/gratitude-jounal-ui
        npm audit --audit-level=moderate
        
    - name: Backend security scan
      if: contains(github.event.head_commit.modified, 'graitude-journal-back-end') || contains(github.event.head_commit.added, 'graitude-journal-back-end') || github.event_name == 'pull_request'
      run: |
        cd graitude-journal-back-end
        mvn dependency:check

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && always() && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    environment: development
    
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        
    - name: Deploy to development
      run: |
        echo "Deploying full stack to development environment..."
        # Add your deployment commands here
        
    - name: Health check
      run: |
        echo "Performing health checks..."
        # Add health check commands here
        
    - name: Notify deployment
      run: |
        echo "Full stack deployed to development environment"

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && always() && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    environment: production
    
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        
    - name: Deploy to production
      run: |
        echo "Deploying full stack to production environment..."
        # Add your deployment commands here
        
    - name: Health check
      run: |
        echo "Performing health checks..."
        # Add health check commands here
        
    - name: Notify deployment
      run: |
        echo "Full stack deployed to production environment" 